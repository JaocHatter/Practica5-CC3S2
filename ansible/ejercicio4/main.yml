- name: Instalar dependencias
  apt: 
    name:
      - prometheus
      - prometheus-node-exporter
      - python3-pip
    update_cache: yes
    state: present  # Corroborar si han sido instaladas

- name: Instalar grafana
  apt:
    deb: https://dl.grafana.com/enterprise/release/grafana-enterprise_11.4.0_amd64.deb
    state: present

- name: Instalar librerias de python necesaria
  pip:
    name:
      - Flask
      - prometheus_client
      - gunicorn
      - flask-prometheus-metrics
    state: present

- name: Crear carpeta para prometheus
  file:
    path: /etc/prometheus
    state: directory
    mode: '0755' # R,W,E

- name: Importar configuraciones de prometheus 
  template:
    src: ../templates/prometheus.yml.j2
    dest: /etc/prometheus/prometheus.yml
  notify: Reiniciar prometheus

- name: Importar las alert_rules 
  template:
    src: ../templates/alert_rules.yml.j2
    dest: /etc/prometheus/alert_rules.yml
  notify: Reiniciar prometheus
  
- name: Permitir puertos
  ufw:
    rule: allow
    port: "{{ item }}"
    proto: tcp
  loop:
    - '3000'
    - '9090'
    - '9100'
  notify: Reiniciar ufw

- name: Crear carpetas para aplicaciones en Flask
  file:
    path: /opt/flask_app
    state: directory 

- name: Copiar aplicaciones en Flask
  template:
    src: ../templates/flask_app_metrics.py.j2
    dest: "/opt/flask_app/flask_app_{{ item }}.py"
  loop:
    - '5000'
    - '5001'

# Ahora debemos crear servicios para la aplicación de Flask
- name: Crear servicio de flask
  template:
    src: ../templates/flask_app.service.j2
    dest: /etc/systemd/system/flask_app_{{ item }}.service
  loop:
    - 5000
    - 5001
  notify:
    - Reiniciar systemd
    - Reiniciar app

# Iniciar los servicios de flask
- name: Iniciar aplicaciones
  systemd:
    name: flask_app_{{ item }}
    enabled: yes
    state: started # Con esto indicamos que no continuaremos hasta que el estado sea "started"
  loop:
    - 5000
    - 5001
  
- name: Asegurar que grafana está activo
  systemd: 
    name: grafana-server
    state: started
    enabled: yes

- name: esperar que grafana-server se encuentre disponible
  uri:
    url: http://localhost:3000
    status_code: 200
    timeout: 60
  register: result
  until: result.status == 200
  retries: 30
  delay: 2

- name: Establecer a prometheus como la base de datos de Grafana
  uri:
    url: http://localhost:3000/api/datasources
    method: POST
    user: admin
    password: admin
    force_basic_auth: yes 
    body_format: json
    body:
      name: Prometheus
      type: prometheus
      url: http://localhost:9090
      access: proxy
      isDefault: true
    status_code: 200,409